<?

	DSApi::reg_eventType( 'OnConnect', 'TSock::OnConnect', array('self','Connection'), 'TSock' );
	DSApi::reg_eventType( 'OnDisconnect', 'TSock::OnDisconnect', array('self','Connection'), 'TSock' );
	DSApi::reg_eventType( 'OnData', 'TSock::OnData', array('self','Connection', 'Data', 'Type'), 'TSock' );

	define("TSock_Public", 1);
	define("TSock_Private", 2);
	
	global $__TSock_Config;
	$__TSock_Config = array();
	
	Class TSock extends __TNoVisual 
	{
		Public $class_name_ex = __CLASS__;
		
		Public $V8JS;
		
		Public Function get_IsConnected()
		{
			global $__TSock_Config;
			return $__TSock_Config[$this->self]->IsConnected;
		}
		
		Public Function get_ID()
		{
			global $__TSock_Config;
			return $__TSock_Config[$this->self]->ID;
		}
		
		Public Function __inspectProperties()
		{
			return true;
		}
		
		Public Function __initComponentInfo()
		{
			parent::__initComponentInfo();
		}
		
		Public Function __construct($onwer=nil,$init=true,$self=nil)
		{
			parent::__construct($onwer, $init, $self);
			
			global $__TSock_Config;
			IF(!$__TSock_Config[$this->self])
			{
				$__TSock_Config[$this->self] = new stdClass;
				$__TSock_Config[$this->self]->IsConnected = false;
				$__TSock_Config[$this->self]->ID = null;
			}
			
			IF($init)
			{
				$this->IP = "127.0.0.1";
				$this->Port = 7777;
			}
		}
		
		Public Static Function OnConnect( $self, $Connection )
		{
			global $__TSock_Config;
			IF( !$Connection )
			{
				$__TSock_Config[$self]->IsConnected = true;
				return;
			}
			ELSEIF(!$__TSock_Config[$self]->ID)
			{
				$__TSock_Config[$self]->ID = $Connection;
				$Connection = null;
			}
			__exEvents::callEventEx( $self, array('Connection' => $Connection), 'OnConnect' );
		}
		
		Public Static Function OnDisconnect( $self, $Connection )
		{
			global $__TSock_Config;
			IF( !$Connection )
			{
				$__TSock_Config[$self]->IsConnected = false;
				$__TSock_Config[$self]->ID = null;
				$Connection = null;
			}
		
			__exEvents::callEventEx( $self, array('Connection' => $Connection), 'OnDisconnect' );
		}
		
		Public Static Function OnData( $self, $Connection, $Data, $Type )
		{
			__exEvents::callEventEx( $self, array('Connection' => $Connection, 'Data' => $Data, 'Type' => $Type), 'OnData' );
		}
		
		Public Function __TSockInit($self)
		{
			global $__TSock;
			IF(isset($__TSock[$self])) return; ELSE $__TSock[$self] = new V8JS;
			
			$V8JS = $__TSock[$self];
			
			$V8JS->Execute( base64_decode('') );
			
			$V8JS->php_reciver = function($Data) use ( $self )
			{
				$Data = explode(":", $Data, 3);
				$Type = $Data[0];
				$Connection = $Data[1];
				$Data = TSock::DecodeData($Data[2]);
				TSock::OnData( $self, $Connection, $Data, $Type );
			};

			$V8JS->php_connect = function($connectId) use ( $self )
			{
				TSock::OnConnect( $self, $connectId );
			};

			$V8JS->php_disconnect = function($connectId) use ( $self )
			{
			 	TSock::OnDisconnect( $self, $connectId );
			};
		}

		Public Static Function json_safe_encode($var)
		{
		   return json_encode(self::json_fix_cyr($var, false));
		}
		
		Public Static Function json_safe_decode($var)
		{
		   return self::json_fix_cyr( json_decode($var), true );
		}
		
		Public Static Function StringDecode($string)
		{
			 return iconv('utf-8', 'windows-1251', $string);;
		}
		
		Public Static Function StringEncode($string)
		{
			return iconv('windows-1251', 'utf-8', $string);
		}
		
		Public Static Function json_fix_cyr($var, $decode = false)
		{
		   if (is_array($var)) {
			   $new = array();
			   foreach ($var as $k => $v) {
				   $new[self::json_fix_cyr($k, $decode)] = json_fix_cyr($v, $decode);
			   }
			   $var = $new;
		   } elseif (is_object($var)) {
			   $vars = get_object_vars($var);
			   foreach ($vars as $m => $v) {
				   $var->$m = self::json_fix_cyr($v, $decode);
			   }
		   } elseif (is_string($var)) {
				if($decode)
					$var = self::StringDecode($var);
				else
					$var = self::StringEncode($var);
		   }
		   return $var;
		}
		
		Public Static Function DecodeData($data)
		{
			return self::json_safe_decode($data);
		}
		
		Public Static Function EncodeData($data)
		{
			return self::json_safe_encode(self::json_safe_encode($data));
		}
		
		Public Function Broadcast($data)
		{
			global $__TSock;
			$V8JS = $__TSock[$this->self];
			$data = self::EncodeData($data);
			$V8JS->Execute('socket.emit("public", '.$data.');');
		}
		
		Public Function Send($id, $data)
		{
			global $__TSock;
			$V8JS = $__TSock[$this->self];
			$data = self::EncodeData($data);
			$V8JS->Execute('socket.emit("private", "'.$id.'", '.$data.');');
		}
		
		Public Function __Connect( $IP = '127.0.0.1', $Port = 7777 )
		{
			global $__TSock;
			$this->__TSockInit($this->self);
			$V8JS = $__TSock[$this->self];
			$V8JS->Execute('socket = io.connect(\'http://'.$IP.':'.$Port.'\');
			socket.on(\'public\', function(data){ php_reciver(\'1:\'+data); });
			socket.on(\'private\', function(data){ php_reciver(\'2:\'+data); });
			socket.on(\'disconnect\', function(connectId){ php_disconnect(connectId); });
			socket.on(\'connect\', function(connectId){ php_connect(connectId); });');
		}
		
		Public Function Connect ( $IP = null, $Port = null )
		{
			IF($IP) $this->IP = $IP;
			IF($Port) $this->Port = $Port;
			$this->__Connect($this->IP,$this->Port);
		}
	}
?>
